/*
 * Copyright 2023 Comcast Cable Communications Management, LLC
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Component from '../component.js'
import Router from '../router/router.js'

let handler

export default () =>
  Component('RouterView', {
    /* eslint-disable no-unused-vars */
    code: {
      render: function anonymous(parent, component, context, components, effect, getRaw) {
        const elms = []
        let componentType
        const rootComponent = component
        let propData
        const elementConfig0 = {}

        elms[0] = this.element({ parent: parent || 'root' }, component)

        elementConfig0['w'] = parent.node.width * (100 / 100)
        elementConfig0['height'] = parent.node.height * (100 / 100)
        elms[0].populate(elementConfig0)
        return elms
      },
      effects: [],
      context: {},
    },
    state() {
      return {
        activeView: null,
      }
    },
    hooks: {
      ready() {
        handler = () => Router.navigate.apply(this)
        Router.navigate.apply(this)
        window.addEventListener('hashchange', handler)
      },
      destroy() {
        window.removeEventListener('hashchange', handler, false)
      },
      focus() {
        this.activeView && this.activeView.$focus()
      },
    },
    input: {
      back(e) {
        const navigating = Router.back()
        if (navigating === false) {
          this.parent.$focus(e)
        }
      },
    },
  })
