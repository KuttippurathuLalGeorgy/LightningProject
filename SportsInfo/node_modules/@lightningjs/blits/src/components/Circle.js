/*
 * Copyright 2023 Comcast Cable Communications Management, LLC
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Component from '../component.js'

export default () =>
  Component('Circle', {
    /* eslint-disable no-unused-vars */
    code: {
      render: function anonymous(parent, component, context, components, effect, getRaw) {
        const elms = []
        let componentType
        const rootComponent = component
        let propData
        const elementConfig0 = {}

        elms[0] = this.element({ parent: parent || 'root' }, component)

        elementConfig0['color'] = component.color
        elementConfig0['w'] = component.size
        elementConfig0['h'] = component.size
        elementConfig0['effects'] = [component.shader('radius', { radius: component.radius })]
        elms[0].populate(elementConfig0)
        return elms
      },
      effects: [
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[0].set('color', component.color)
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[0].set('w', component.size)
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[0].set('h', component.size)
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[0].set('effects', [component.shader('radius', { radius: component.radius })])
        },
      ],
      context: {},
    },
    props: [{ key: 'size', default: 40 }, 'color'],
    computed: {
      radius() {
        return this.size / 2
      },
    },
  })
