/*
 * Copyright 2023 Comcast Cable Communications Management, LLC
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import Component from '../component.js'
import { renderer } from '../launch.js'
import fps_sprite from '../../public/assets/fps_sprite.base64.js'

export default () =>
  Component('FPScounter', {
    /* eslint-disable no-unused-vars */
    code: {
      render: function anonymous(parent, component, context, components, effect, getRaw) {
        const elms = []
        let componentType
        const rootComponent = component
        let propData
        const elementConfig0 = {}

        elms[0] = this.element({ parent: parent || 'root' }, component)

        elms[0].populate(elementConfig0)
        parent = elms[0]
        const elementConfig1 = {}

        elms[1] = this.element({ parent: parent || 'root' }, component)

        elementConfig1['y'] = 15
        elementConfig1['x'] = 20
        elms[1].populate(elementConfig1)
        parent = elms[1]
        const elementConfig2 = {}

        elms[2] = this.element({ parent: parent || 'root' }, component)

        elms[2].populate(elementConfig2)

        const cmp3 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[2]
        const elementConfig3 = {}

        elms[3] = this.element({ parent: parent || 'root' }, component)

        elementConfig3['image'] = component.image
        elementConfig3['w'] = 43
        elementConfig3['h'] = 25
        elementConfig3['map'] = component.sprite
        elementConfig3['frame'] = 'fps'

        const skip3 = []
        if (typeof cmp3 !== 'undefined') {
          for (let key in cmp3.config.props) {
            delete elementConfig3[cmp3.config.props[key]]
            skip3.push(cmp3.config.props[key])
          }
        }

        elms[3].populate(elementConfig3)
        parent = elms[3]
        const props4 = {}
        props4['image'] = component.image
        props4['w'] = 43
        props4['h'] = 25
        props4['map'] = component.sprite
        props4['frame'] = 'fps'

        componentType = props4['is'] || 'Sprite'

        let component4
        if (typeof componentType === 'string') {
          component4 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component4) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component4 = componentType
        }

        elms[4] = component4.call(null, { props: props4 }, elms[3], component)

        if (elms[4][Symbol.for('slots')][0]) {
          parent = elms[4][Symbol.for('slots')][0]
          component = elms[4]
        } else {
          parent = elms[4][Symbol.for('children')][0]
        }

        parent = elms[2]
        const elementConfig5 = {}

        elms[5] = this.element({ parent: parent || 'root' }, component)

        elementConfig5['x'] = 58
        elementConfig5['y'] = 2
        elms[5].populate(elementConfig5)

        const cmp6 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[5]
        const elementConfig6 = {}

        elms[6] = this.element({ parent: parent || 'root' }, component)

        elementConfig6['image'] = component.image
        elementConfig6['x'] = 0
        elementConfig6['h'] = 20
        elementConfig6['w'] = 20
        elementConfig6['map'] = component.sprite
        elementConfig6['frame'] = component.fps[0]

        const skip6 = []
        if (typeof cmp6 !== 'undefined') {
          for (let key in cmp6.config.props) {
            delete elementConfig6[cmp6.config.props[key]]
            skip6.push(cmp6.config.props[key])
          }
        }

        elms[6].populate(elementConfig6)
        parent = elms[6]
        const props7 = {}
        props7['image'] = component.image
        props7['x'] = 0
        props7['h'] = 20
        props7['w'] = 20
        props7['map'] = component.sprite

        propData = component.fps[0]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props7['frame'] = propData

        componentType = props7['is'] || 'Sprite'

        let component7
        if (typeof componentType === 'string') {
          component7 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component7) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component7 = componentType
        }

        elms[7] = component7.call(null, { props: props7 }, elms[6], component)

        if (elms[7][Symbol.for('slots')][0]) {
          parent = elms[7][Symbol.for('slots')][0]
          component = elms[7]
        } else {
          parent = elms[7][Symbol.for('children')][0]
        }

        const cmp8 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[5]
        const elementConfig8 = {}

        elms[8] = this.element({ parent: parent || 'root' }, component)

        elementConfig8['image'] = component.image
        elementConfig8['x'] = 18
        elementConfig8['h'] = 20
        elementConfig8['w'] = 20
        elementConfig8['map'] = component.sprite
        elementConfig8['frame'] = component.fps[1]

        const skip8 = []
        if (typeof cmp8 !== 'undefined') {
          for (let key in cmp8.config.props) {
            delete elementConfig8[cmp8.config.props[key]]
            skip8.push(cmp8.config.props[key])
          }
        }

        elms[8].populate(elementConfig8)
        parent = elms[8]
        const props9 = {}
        props9['image'] = component.image
        props9['x'] = 18
        props9['h'] = 20
        props9['w'] = 20
        props9['map'] = component.sprite

        propData = component.fps[1]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props9['frame'] = propData

        componentType = props9['is'] || 'Sprite'

        let component9
        if (typeof componentType === 'string') {
          component9 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component9) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component9 = componentType
        }

        elms[9] = component9.call(null, { props: props9 }, elms[8], component)

        if (elms[9][Symbol.for('slots')][0]) {
          parent = elms[9][Symbol.for('slots')][0]
          component = elms[9]
        } else {
          parent = elms[9][Symbol.for('children')][0]
        }

        const cmp10 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[5]
        const elementConfig10 = {}

        elms[10] = this.element({ parent: parent || 'root' }, component)

        elementConfig10['image'] = component.image
        elementConfig10['x'] = 36
        elementConfig10['h'] = 20
        elementConfig10['w'] = 20
        elementConfig10['map'] = component.sprite
        elementConfig10['frame'] = component.fps[2]

        const skip10 = []
        if (typeof cmp10 !== 'undefined') {
          for (let key in cmp10.config.props) {
            delete elementConfig10[cmp10.config.props[key]]
            skip10.push(cmp10.config.props[key])
          }
        }

        elms[10].populate(elementConfig10)
        parent = elms[10]
        const props11 = {}
        props11['image'] = component.image
        props11['x'] = 36
        props11['h'] = 20
        props11['w'] = 20
        props11['map'] = component.sprite

        propData = component.fps[2]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props11['frame'] = propData

        componentType = props11['is'] || 'Sprite'

        let component11
        if (typeof componentType === 'string') {
          component11 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component11) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component11 = componentType
        }

        elms[11] = component11.call(null, { props: props11 }, elms[10], component)

        if (elms[11][Symbol.for('slots')][0]) {
          parent = elms[11][Symbol.for('slots')][0]
          component = elms[11]
        } else {
          parent = elms[11][Symbol.for('children')][0]
        }

        parent = elms[1]
        const elementConfig12 = {}

        elms[12] = this.element({ parent: parent || 'root' }, component)

        elementConfig12['x'] = 150
        elms[12].populate(elementConfig12)

        const cmp13 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[12]
        const elementConfig13 = {}

        elms[13] = this.element({ parent: parent || 'root' }, component)

        elementConfig13['image'] = component.image
        elementConfig13['y'] = 2
        elementConfig13['w'] = 48
        elementConfig13['h'] = 25
        elementConfig13['map'] = component.sprite
        elementConfig13['frame'] = 'avg'

        const skip13 = []
        if (typeof cmp13 !== 'undefined') {
          for (let key in cmp13.config.props) {
            delete elementConfig13[cmp13.config.props[key]]
            skip13.push(cmp13.config.props[key])
          }
        }

        elms[13].populate(elementConfig13)
        parent = elms[13]
        const props14 = {}
        props14['image'] = component.image
        props14['y'] = 2
        props14['w'] = 48
        props14['h'] = 25
        props14['map'] = component.sprite
        props14['frame'] = 'avg'

        componentType = props14['is'] || 'Sprite'

        let component14
        if (typeof componentType === 'string') {
          component14 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component14) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component14 = componentType
        }

        elms[14] = component14.call(null, { props: props14 }, elms[13], component)

        if (elms[14][Symbol.for('slots')][0]) {
          parent = elms[14][Symbol.for('slots')][0]
          component = elms[14]
        } else {
          parent = elms[14][Symbol.for('children')][0]
        }

        parent = elms[12]
        const elementConfig15 = {}

        elms[15] = this.element({ parent: parent || 'root' }, component)

        elementConfig15['x'] = 63
        elementConfig15['y'] = 2
        elms[15].populate(elementConfig15)

        const cmp16 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[15]
        const elementConfig16 = {}

        elms[16] = this.element({ parent: parent || 'root' }, component)

        elementConfig16['image'] = component.image
        elementConfig16['x'] = 0
        elementConfig16['h'] = 20
        elementConfig16['w'] = 20
        elementConfig16['map'] = component.sprite
        elementConfig16['frame'] = component.avgFps[0]

        const skip16 = []
        if (typeof cmp16 !== 'undefined') {
          for (let key in cmp16.config.props) {
            delete elementConfig16[cmp16.config.props[key]]
            skip16.push(cmp16.config.props[key])
          }
        }

        elms[16].populate(elementConfig16)
        parent = elms[16]
        const props17 = {}
        props17['image'] = component.image
        props17['x'] = 0
        props17['h'] = 20
        props17['w'] = 20
        props17['map'] = component.sprite

        propData = component.avgFps[0]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props17['frame'] = propData

        componentType = props17['is'] || 'Sprite'

        let component17
        if (typeof componentType === 'string') {
          component17 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component17) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component17 = componentType
        }

        elms[17] = component17.call(null, { props: props17 }, elms[16], component)

        if (elms[17][Symbol.for('slots')][0]) {
          parent = elms[17][Symbol.for('slots')][0]
          component = elms[17]
        } else {
          parent = elms[17][Symbol.for('children')][0]
        }

        const cmp18 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[15]
        const elementConfig18 = {}

        elms[18] = this.element({ parent: parent || 'root' }, component)

        elementConfig18['image'] = component.image
        elementConfig18['x'] = 18
        elementConfig18['h'] = 20
        elementConfig18['w'] = 20
        elementConfig18['map'] = component.sprite
        elementConfig18['frame'] = component.avgFps[1]

        const skip18 = []
        if (typeof cmp18 !== 'undefined') {
          for (let key in cmp18.config.props) {
            delete elementConfig18[cmp18.config.props[key]]
            skip18.push(cmp18.config.props[key])
          }
        }

        elms[18].populate(elementConfig18)
        parent = elms[18]
        const props19 = {}
        props19['image'] = component.image
        props19['x'] = 18
        props19['h'] = 20
        props19['w'] = 20
        props19['map'] = component.sprite

        propData = component.avgFps[1]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props19['frame'] = propData

        componentType = props19['is'] || 'Sprite'

        let component19
        if (typeof componentType === 'string') {
          component19 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component19) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component19 = componentType
        }

        elms[19] = component19.call(null, { props: props19 }, elms[18], component)

        if (elms[19][Symbol.for('slots')][0]) {
          parent = elms[19][Symbol.for('slots')][0]
          component = elms[19]
        } else {
          parent = elms[19][Symbol.for('children')][0]
        }

        const cmp20 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[15]
        const elementConfig20 = {}

        elms[20] = this.element({ parent: parent || 'root' }, component)

        elementConfig20['image'] = component.image
        elementConfig20['x'] = 36
        elementConfig20['h'] = 20
        elementConfig20['w'] = 20
        elementConfig20['map'] = component.sprite
        elementConfig20['frame'] = component.avgFps[2]

        const skip20 = []
        if (typeof cmp20 !== 'undefined') {
          for (let key in cmp20.config.props) {
            delete elementConfig20[cmp20.config.props[key]]
            skip20.push(cmp20.config.props[key])
          }
        }

        elms[20].populate(elementConfig20)
        parent = elms[20]
        const props21 = {}
        props21['image'] = component.image
        props21['x'] = 36
        props21['h'] = 20
        props21['w'] = 20
        props21['map'] = component.sprite

        propData = component.avgFps[2]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props21['frame'] = propData

        componentType = props21['is'] || 'Sprite'

        let component21
        if (typeof componentType === 'string') {
          component21 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component21) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component21 = componentType
        }

        elms[21] = component21.call(null, { props: props21 }, elms[20], component)

        if (elms[21][Symbol.for('slots')][0]) {
          parent = elms[21][Symbol.for('slots')][0]
          component = elms[21]
        } else {
          parent = elms[21][Symbol.for('children')][0]
        }

        parent = elms[1]
        const elementConfig22 = {}

        elms[22] = this.element({ parent: parent || 'root' }, component)

        elementConfig22['x'] = 0
        elementConfig22['y'] = 40
        elms[22].populate(elementConfig22)

        const cmp23 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[22]
        const elementConfig23 = {}

        elms[23] = this.element({ parent: parent || 'root' }, component)

        elementConfig23['image'] = component.image
        elementConfig23['x'] = -2
        elementConfig23['w'] = 47
        elementConfig23['h'] = 25
        elementConfig23['map'] = component.sprite
        elementConfig23['frame'] = 'min'

        const skip23 = []
        if (typeof cmp23 !== 'undefined') {
          for (let key in cmp23.config.props) {
            delete elementConfig23[cmp23.config.props[key]]
            skip23.push(cmp23.config.props[key])
          }
        }

        elms[23].populate(elementConfig23)
        parent = elms[23]
        const props24 = {}
        props24['image'] = component.image
        props24['x'] = -2
        props24['w'] = 47
        props24['h'] = 25
        props24['map'] = component.sprite
        props24['frame'] = 'min'

        componentType = props24['is'] || 'Sprite'

        let component24
        if (typeof componentType === 'string') {
          component24 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component24) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component24 = componentType
        }

        elms[24] = component24.call(null, { props: props24 }, elms[23], component)

        if (elms[24][Symbol.for('slots')][0]) {
          parent = elms[24][Symbol.for('slots')][0]
          component = elms[24]
        } else {
          parent = elms[24][Symbol.for('children')][0]
        }

        parent = elms[22]
        const elementConfig25 = {}

        elms[25] = this.element({ parent: parent || 'root' }, component)

        elementConfig25['x'] = 58
        elementConfig25['y'] = 2
        elms[25].populate(elementConfig25)

        const cmp26 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[25]
        const elementConfig26 = {}

        elms[26] = this.element({ parent: parent || 'root' }, component)

        elementConfig26['image'] = component.image
        elementConfig26['x'] = 0
        elementConfig26['h'] = 20
        elementConfig26['w'] = 20
        elementConfig26['map'] = component.sprite
        elementConfig26['frame'] = component.minFps[0]

        const skip26 = []
        if (typeof cmp26 !== 'undefined') {
          for (let key in cmp26.config.props) {
            delete elementConfig26[cmp26.config.props[key]]
            skip26.push(cmp26.config.props[key])
          }
        }

        elms[26].populate(elementConfig26)
        parent = elms[26]
        const props27 = {}
        props27['image'] = component.image
        props27['x'] = 0
        props27['h'] = 20
        props27['w'] = 20
        props27['map'] = component.sprite

        propData = component.minFps[0]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props27['frame'] = propData

        componentType = props27['is'] || 'Sprite'

        let component27
        if (typeof componentType === 'string') {
          component27 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component27) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component27 = componentType
        }

        elms[27] = component27.call(null, { props: props27 }, elms[26], component)

        if (elms[27][Symbol.for('slots')][0]) {
          parent = elms[27][Symbol.for('slots')][0]
          component = elms[27]
        } else {
          parent = elms[27][Symbol.for('children')][0]
        }

        const cmp28 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[25]
        const elementConfig28 = {}

        elms[28] = this.element({ parent: parent || 'root' }, component)

        elementConfig28['image'] = component.image
        elementConfig28['x'] = 18
        elementConfig28['h'] = 20
        elementConfig28['w'] = 20
        elementConfig28['map'] = component.sprite
        elementConfig28['frame'] = component.minFps[1]

        const skip28 = []
        if (typeof cmp28 !== 'undefined') {
          for (let key in cmp28.config.props) {
            delete elementConfig28[cmp28.config.props[key]]
            skip28.push(cmp28.config.props[key])
          }
        }

        elms[28].populate(elementConfig28)
        parent = elms[28]
        const props29 = {}
        props29['image'] = component.image
        props29['x'] = 18
        props29['h'] = 20
        props29['w'] = 20
        props29['map'] = component.sprite

        propData = component.minFps[1]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props29['frame'] = propData

        componentType = props29['is'] || 'Sprite'

        let component29
        if (typeof componentType === 'string') {
          component29 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component29) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component29 = componentType
        }

        elms[29] = component29.call(null, { props: props29 }, elms[28], component)

        if (elms[29][Symbol.for('slots')][0]) {
          parent = elms[29][Symbol.for('slots')][0]
          component = elms[29]
        } else {
          parent = elms[29][Symbol.for('children')][0]
        }

        const cmp30 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[25]
        const elementConfig30 = {}

        elms[30] = this.element({ parent: parent || 'root' }, component)

        elementConfig30['image'] = component.image
        elementConfig30['x'] = 36
        elementConfig30['h'] = 20
        elementConfig30['w'] = 20
        elementConfig30['map'] = component.sprite
        elementConfig30['frame'] = component.minFps[2]

        const skip30 = []
        if (typeof cmp30 !== 'undefined') {
          for (let key in cmp30.config.props) {
            delete elementConfig30[cmp30.config.props[key]]
            skip30.push(cmp30.config.props[key])
          }
        }

        elms[30].populate(elementConfig30)
        parent = elms[30]
        const props31 = {}
        props31['image'] = component.image
        props31['x'] = 36
        props31['h'] = 20
        props31['w'] = 20
        props31['map'] = component.sprite

        propData = component.minFps[2]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props31['frame'] = propData

        componentType = props31['is'] || 'Sprite'

        let component31
        if (typeof componentType === 'string') {
          component31 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component31) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component31 = componentType
        }

        elms[31] = component31.call(null, { props: props31 }, elms[30], component)

        if (elms[31][Symbol.for('slots')][0]) {
          parent = elms[31][Symbol.for('slots')][0]
          component = elms[31]
        } else {
          parent = elms[31][Symbol.for('children')][0]
        }

        parent = elms[1]
        const elementConfig32 = {}

        elms[32] = this.element({ parent: parent || 'root' }, component)

        elementConfig32['x'] = 150
        elementConfig32['y'] = 40
        elms[32].populate(elementConfig32)

        const cmp33 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[32]
        const elementConfig33 = {}

        elms[33] = this.element({ parent: parent || 'root' }, component)

        elementConfig33['image'] = component.image
        elementConfig33['w'] = 53
        elementConfig33['h'] = 25
        elementConfig33['map'] = component.sprite
        elementConfig33['frame'] = 'max'

        const skip33 = []
        if (typeof cmp33 !== 'undefined') {
          for (let key in cmp33.config.props) {
            delete elementConfig33[cmp33.config.props[key]]
            skip33.push(cmp33.config.props[key])
          }
        }

        elms[33].populate(elementConfig33)
        parent = elms[33]
        const props34 = {}
        props34['image'] = component.image
        props34['w'] = 53
        props34['h'] = 25
        props34['map'] = component.sprite
        props34['frame'] = 'max'

        componentType = props34['is'] || 'Sprite'

        let component34
        if (typeof componentType === 'string') {
          component34 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component34) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component34 = componentType
        }

        elms[34] = component34.call(null, { props: props34 }, elms[33], component)

        if (elms[34][Symbol.for('slots')][0]) {
          parent = elms[34][Symbol.for('slots')][0]
          component = elms[34]
        } else {
          parent = elms[34][Symbol.for('children')][0]
        }

        parent = elms[32]
        const elementConfig35 = {}

        elms[35] = this.element({ parent: parent || 'root' }, component)

        elementConfig35['x'] = 63
        elementConfig35['y'] = 2
        elms[35].populate(elementConfig35)

        const cmp36 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[35]
        const elementConfig36 = {}

        elms[36] = this.element({ parent: parent || 'root' }, component)

        elementConfig36['image'] = component.image
        elementConfig36['x'] = 0
        elementConfig36['h'] = 20
        elementConfig36['w'] = 20
        elementConfig36['map'] = component.sprite
        elementConfig36['frame'] = component.maxFps[0]

        const skip36 = []
        if (typeof cmp36 !== 'undefined') {
          for (let key in cmp36.config.props) {
            delete elementConfig36[cmp36.config.props[key]]
            skip36.push(cmp36.config.props[key])
          }
        }

        elms[36].populate(elementConfig36)
        parent = elms[36]
        const props37 = {}
        props37['image'] = component.image
        props37['x'] = 0
        props37['h'] = 20
        props37['w'] = 20
        props37['map'] = component.sprite

        propData = component.maxFps[0]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props37['frame'] = propData

        componentType = props37['is'] || 'Sprite'

        let component37
        if (typeof componentType === 'string') {
          component37 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component37) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component37 = componentType
        }

        elms[37] = component37.call(null, { props: props37 }, elms[36], component)

        if (elms[37][Symbol.for('slots')][0]) {
          parent = elms[37][Symbol.for('slots')][0]
          component = elms[37]
        } else {
          parent = elms[37][Symbol.for('children')][0]
        }

        const cmp38 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[35]
        const elementConfig38 = {}

        elms[38] = this.element({ parent: parent || 'root' }, component)

        elementConfig38['image'] = component.image
        elementConfig38['x'] = 18
        elementConfig38['h'] = 20
        elementConfig38['w'] = 20
        elementConfig38['map'] = component.sprite
        elementConfig38['frame'] = component.maxFps[1]

        const skip38 = []
        if (typeof cmp38 !== 'undefined') {
          for (let key in cmp38.config.props) {
            delete elementConfig38[cmp38.config.props[key]]
            skip38.push(cmp38.config.props[key])
          }
        }

        elms[38].populate(elementConfig38)
        parent = elms[38]
        const props39 = {}
        props39['image'] = component.image
        props39['x'] = 18
        props39['h'] = 20
        props39['w'] = 20
        props39['map'] = component.sprite

        propData = component.maxFps[1]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props39['frame'] = propData

        componentType = props39['is'] || 'Sprite'

        let component39
        if (typeof componentType === 'string') {
          component39 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component39) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component39 = componentType
        }

        elms[39] = component39.call(null, { props: props39 }, elms[38], component)

        if (elms[39][Symbol.for('slots')][0]) {
          parent = elms[39][Symbol.for('slots')][0]
          component = elms[39]
        } else {
          parent = elms[39][Symbol.for('children')][0]
        }

        const cmp40 = (context.components && context.components['Sprite']) || components['Sprite']

        parent = elms[35]
        const elementConfig40 = {}

        elms[40] = this.element({ parent: parent || 'root' }, component)

        elementConfig40['image'] = component.image
        elementConfig40['x'] = 36
        elementConfig40['h'] = 20
        elementConfig40['w'] = 20
        elementConfig40['map'] = component.sprite
        elementConfig40['frame'] = component.maxFps[2]

        const skip40 = []
        if (typeof cmp40 !== 'undefined') {
          for (let key in cmp40.config.props) {
            delete elementConfig40[cmp40.config.props[key]]
            skip40.push(cmp40.config.props[key])
          }
        }

        elms[40].populate(elementConfig40)
        parent = elms[40]
        const props41 = {}
        props41['image'] = component.image
        props41['x'] = 36
        props41['h'] = 20
        props41['w'] = 20
        props41['map'] = component.sprite

        propData = component.maxFps[2]
        if (Array.isArray(propData) === true) {
          propData = getRaw(propData).slice(0)
        }
        props41['frame'] = propData

        componentType = props41['is'] || 'Sprite'

        let component41
        if (typeof componentType === 'string') {
          component41 =
            (context.components && context.components[componentType]) || components[componentType]
          if (!component41) {
            throw new Error('Component "Sprite" not found')
          }
        } else if (
          typeof componentType === 'function' &&
          componentType[Symbol.for('isComponent')] === true
        ) {
          component41 = componentType
        }

        elms[41] = component41.call(null, { props: props41 }, elms[40], component)

        if (elms[41][Symbol.for('slots')][0]) {
          parent = elms[41][Symbol.for('slots')][0]
          component = elms[41]
        } else {
          parent = elms[41][Symbol.for('children')][0]
        }

        return elms
      },
      effects: [
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip6 === 'undefined' || skip6.indexOf('frame') === -1)
            elms[6].set('frame', component.fps[0])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[7][Symbol.for('props')]['frame'] = component.fps[0]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip8 === 'undefined' || skip8.indexOf('frame') === -1)
            elms[8].set('frame', component.fps[1])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[9][Symbol.for('props')]['frame'] = component.fps[1]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip10 === 'undefined' || skip10.indexOf('frame') === -1)
            elms[10].set('frame', component.fps[2])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[11][Symbol.for('props')]['frame'] = component.fps[2]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip16 === 'undefined' || skip16.indexOf('frame') === -1)
            elms[16].set('frame', component.avgFps[0])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[17][Symbol.for('props')]['frame'] = component.avgFps[0]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip18 === 'undefined' || skip18.indexOf('frame') === -1)
            elms[18].set('frame', component.avgFps[1])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[19][Symbol.for('props')]['frame'] = component.avgFps[1]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip20 === 'undefined' || skip20.indexOf('frame') === -1)
            elms[20].set('frame', component.avgFps[2])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[21][Symbol.for('props')]['frame'] = component.avgFps[2]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip26 === 'undefined' || skip26.indexOf('frame') === -1)
            elms[26].set('frame', component.minFps[0])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[27][Symbol.for('props')]['frame'] = component.minFps[0]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip28 === 'undefined' || skip28.indexOf('frame') === -1)
            elms[28].set('frame', component.minFps[1])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[29][Symbol.for('props')]['frame'] = component.minFps[1]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip30 === 'undefined' || skip30.indexOf('frame') === -1)
            elms[30].set('frame', component.minFps[2])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[31][Symbol.for('props')]['frame'] = component.minFps[2]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip36 === 'undefined' || skip36.indexOf('frame') === -1)
            elms[36].set('frame', component.maxFps[0])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[37][Symbol.for('props')]['frame'] = component.maxFps[0]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip38 === 'undefined' || skip38.indexOf('frame') === -1)
            elms[38].set('frame', component.maxFps[1])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[39][Symbol.for('props')]['frame'] = component.maxFps[1]
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          if (typeof skip40 === 'undefined' || skip40.indexOf('frame') === -1)
            elms[40].set('frame', component.maxFps[2])
        },
        function anonymous(component, elms, context, components, rootComponent, effect) {
          elms[41][Symbol.for('props')]['frame'] = component.maxFps[2]
        },
      ],
      context: {},
    },
    state() {
      return {
        image: fps_sprite,
        sprite: {
          defaults: {
            y: 1,
            w: 20,
            h: 20,
          },
          frames: {
            '-': { x: -1000 },
            0: { x: 1 },
            1: { x: 23 },
            2: { x: 45 },
            3: { x: 67 },
            4: { x: 89 },
            5: { x: 111 },
            6: { x: 133 },
            7: { x: 155 },
            8: { x: 177 },
            9: { x: 199 },
            avg: { x: 221, w: 48, h: 25 },
            fps: { x: 271, w: 43, h: 25 },
            max: { x: 316, w: 53, h: 25 },
            min: { x: 371, w: 47, h: 25 },
          },
        },
        fps: '---',
        avgFps: '---',
        minFps: '---',
        maxFps: '---',
      }
    },
    hooks: {
      ready() {
        let minFps = 10000
        let maxFps = 0
        let avgFps = 0
        let totalFps = 0
        let fpsUpdateCounter = 0

        renderer.on('fpsUpdate', (rM, { fps }) => {
          minFps = Math.min(fps, minFps)
          maxFps = Math.max(fps, maxFps)
          totalFps += fps
          fpsUpdateCounter++
          avgFps = Math.round(totalFps / fpsUpdateCounter)

          this.fps = fps.toString().padStart(3, '0')
          this.avgFps = avgFps.toString().padStart(3, '0')
          this.minFps = minFps.toString().padStart(3, '0')
          this.maxFps = maxFps.toString().padStart(3, '0')
        })
      },
    },
  })
